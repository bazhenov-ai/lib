#!/usr/bin/env python3
# –°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú.
import os
import sys

def print_progress_bar(prefix, current, total, bar_length=50, is_chars=False):
    """–í—ã–≤–æ–¥–∏—Ç –∑–µ–ª–µ–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
    if total == 0:
        return

    percent = int(current * 100 / total)
    filled_length = int(bar_length * current // total)
    bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)

    unit = "—Å–∏–º–≤–æ–ª–æ–≤" if is_chars else "—Å—Ç—Ä–æ–∫"
    print(f'\r\033[92m{prefix} [{bar}] {percent}% ({current}/{total} {unit})\033[0m', end='', flush=True)

def reverse_file():
    input_file = "input.txt"
    output_file = "output.txt"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª input.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    print("üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...")
    print("==========================================")

    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("üìä –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞...")
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except UnicodeDecodeError:
        # –ï—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        with open(input_file, 'r') as f:
            lines = f.readlines()

    total_lines = len(lines)

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
    total_chars = 0
    for line in lines:
        total_chars += len(line.rstrip('\n\r'))

    print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")
    print()

    # –≠—Ç–∞–ø 1: –†–µ–≤–µ—Ä—Å –ø–æ—Ä—è–¥–∫–∞ —Å—Ç—Ä–æ–∫
    print("üîÑ –≠—Ç–∞–ø 1: –†–µ–≤–µ—Ä—Å –ø–æ—Ä—è–¥–∫–∞ —Å—Ç—Ä–æ–∫...")
    reversed_lines = []

    for i in range(total_lines - 1, -1, -1):
        reversed_lines.append(lines[i])
        current_processed = total_lines - i
        print_progress_bar("üü¢", current_processed, total_lines)

    print("\n‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω!")

    # –≠—Ç–∞–ø 2: –†–µ–≤–µ—Ä—Å —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    print("\nüî§ –≠—Ç–∞–ø 2: –†–µ–≤–µ—Ä—Å —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö...")
    final_lines = []
    processed_chars = 0

    for i, line in enumerate(reversed_lines):
        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —Ä–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        cleaned_line = line.rstrip('\n\r')
        reversed_chars = cleaned_line[::-1] + '\n'
        final_lines.append(reversed_chars)

        processed_chars += len(cleaned_line)
        print_progress_bar("üî†", processed_chars, total_chars, is_chars=True)

    print("\n‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω!")

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\nüíæ –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.writelines(final_lines)
    except:
        with open(output_file, 'w') as f:
            f.writelines(final_lines)

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    output_chars = 0
    for line in final_lines:
        output_chars += len(line.rstrip('\n\r'))

    print("==========================================")
    print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")

if __name__ == "__main__":
    reverse_file()
